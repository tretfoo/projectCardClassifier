# CardClassifier

CardClassifier — проект по классификации изображений игральных карт с помощью сверточной нейронной сети (CNN).

## Структура проекта
```
CardClassifier/
├── data/                      
│   ├── test/                     # Тестовая выборка
│   ├── train/                    # Обучающая выборка
│   └── valid/                    # Валидационная выборка
├── model/                     
│   ├── model.py                  # Определение архитектуры модели (CardCNN)
│   └── saved_model.pth           # Сохранённые веса обученной модели
├── plots/                        # Каталог для сохранения графиков и визуализаций
├── utils/                     
│   ├── test_utils.py             # Функции для тестирования 
│   ├── training_utils.py         # Функции для обучения модели
│   └── visualization_utils.py    # Визуализация результатов (графики, предсказания, confusion matrix)
├── dataset.py                    # Класс CardDataset и функция get_card_loaders
├── requirements.txt              # Зависимости проекта (библиотеки)
├── test.py                       # Скрипт для тестирования модели на тестовой выборке
├── train.py                      # Скрипт для обучения модели
└── visualize_predictions_test.py # Скрипт для визуализации предсказаний на отдельных примерах
```

## Датасет

Для обучения и тестирования модели используется датасет с Kaggle, содержащий изображения игральных карт. Ссылка на датасет: https://www.kaggle.com/datasets/gpiosenka/cards-image-datasetclassification/data

**Описание данных**:
- Все изображения представлены в формате JPG, имеют фиксированное разрешение 224×224×3.
- Датасет разбит на три выборки:
  - Train: 7624 изображений
  - Validation: 265 изображений
  - Test: 265 изображений
- Всего 53 класса (все стандартные карты: от двойки до туза всех мастей + джокеры).

## Модель

В качестве основной модели используется кастомная сверточная нейронная сеть CardCNN. Архитектура сети включает три сверточных блока: каждый блок состоит из сверточного слоя, функции активации ReLU и последующего слоя подвыборки MaxPooling с ядром 2x2. Первый сверточный слой преобразует вход с 3 каналами в 32 карты признаков, далее происходит увеличение глубины до 64 и 128 каналов соответственно. После последнего сверточного слоя выход разворачивается и передается в полносвязный слой с 256 нейронами, за которым следует дропаут для регуляризации, и финальный выходной слой с 53 нейронами 

## Аугментация данных

Для улучшения обобщающей способности модели применяется аугментация изображений в обучающем наборе данных.
- используются случайное горизонтальное отражение 
- случайный поворот на ±10 градусов
- а также случайные изменения яркости, контрастности и насыщенности.
- все изображения нормализуются в диапазоне значений от -1 до 1

Для валидации и тестирования используется только нормализация, без аугментаций.

## Обучение 

Для обучения модели используется: 
- оптимизатор `torch.optim.Adam`
- функция потерь `nn.CrossEntropyLoss`

Обучение происходит в течение `30` эпох, при этом на каждой эпохе оценивается точность и потери на тренировочной и валидационной выборках. 
Все метрики сохраняются и визуализируются в виде графиков, которые сохраняются в файл `plots/training_history.png`

## Результаты

- ### Истории обучения:
![training_history.png](plots/training_history.png)

- ### Матрица ошибок:
![confusion_matrix.png](plots/confusion_matrix.png)

- ###  Визуализация предсказания модели для конкретного изображения:

![visualized_prediction1.png](plots/visualized_prediction1.png)
![visualized_prediction2.png](plots/visualized_prediction2.png)
![visualized_prediction3.png](plots/visualized_prediction3.png)
![visualized_prediction4.png](plots/visualized_prediction4.png)
![visualized_prediction5.png](plots/visualized_prediction5.png)
